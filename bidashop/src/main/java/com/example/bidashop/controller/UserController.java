package com.example.bidashop.controller;

import com.example.bidashop.model.User;
import com.example.bidashop.security.CustomUserDetailsService;
import com.example.bidashop.utils.ApiResponse;
import com.example.bidashop.utils.PaginationResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.Optional;

@RestController
@RequestMapping("/api/users")
public class UserController {

    @Autowired
    private CustomUserDetailsService userDetailsService;

    @Autowired
    private PasswordEncoder passwordEncoder;

    // L·∫•y t·∫•t c·∫£ ng∆∞·ªùi d√πng v·ªõi ph√¢n trang v√† t√¨m ki·∫øm
    @GetMapping
    public ResponseEntity<ApiResponse<PaginationResponse<User>>> getAllUsers(
            @RequestParam(required = false) String keyword,
            @RequestParam(required = false) String role, // üîπ Th√™m l·ªçc theo role
            @RequestParam(defaultValue = "1") int page,
            @RequestParam(defaultValue = "10") int limit) {

        PaginationResponse<User> users = userDetailsService.getAllUsers(keyword, role, page, limit);
        ApiResponse<PaginationResponse<User>> response = new ApiResponse<>(200, users,
                "L·∫•y danh s√°ch ng∆∞·ªùi d√πng th√†nh c√¥ng");

        return ResponseEntity.ok(response);
    }
    @GetMapping("/all-staff")
    public ResponseEntity<ApiResponse<PaginationResponse<User>>> getAllStaff(
            @RequestParam(required = false) String keyword,
            @RequestParam(required = false) String role, // üîπ Th√™m l·ªçc theo role
            @RequestParam(defaultValue = "1") int page,
            @RequestParam(defaultValue = "10") int limit) {
    
        // If role is "CUSTOMER", set it to null, so that it's excluded from the filter
        if ("CUSTOMER".equalsIgnoreCase(role)) {
            role = null;  // Exclude "CUSTOMER" role
        }
    
        PaginationResponse<User> users = userDetailsService.getAllStaff(keyword, role, page, limit);
        ApiResponse<PaginationResponse<User>> response = new ApiResponse<>(200, users,
                "L·∫•y danh s√°ch ng∆∞·ªùi d√πng th√†nh c√¥ng");
    
        return ResponseEntity.ok(response);
    }
    
    // L·∫•y ng∆∞·ªùi d√πng theo ID
    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<User>> getUserById(@PathVariable Long id) {
        Optional<User> user = userDetailsService.getUserById(id);
        return user.map(u -> {
            ApiResponse<User> response = new ApiResponse<>(200, u, "L·∫•y ng∆∞·ªùi d√πng th√†nh c√¥ng");
            return ResponseEntity.ok(response);
        }).orElseGet(() -> {
            ApiResponse<User> response = new ApiResponse<>(404, null, "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");
            return ResponseEntity.status(404).body(response);
        });
    }

    @PostMapping
    public ResponseEntity<ApiResponse<User>> createUser(
            @RequestParam("username") String username,
            @RequestParam("password") String password,
            @RequestParam("email") String email,
            @RequestParam("phoneNumber") String phoneNumber,
            @RequestParam("fullName") String fullName,
            @RequestParam("role") User.Role role,
            @RequestParam("address") String address,
            @RequestPart(value = "avatar", required = false) MultipartFile imageFile) {
        try {
            User user = new User();
            user.setUsername(username);
            user.setPassword(passwordEncoder.encode(password)); // M√£ h√≥a m·∫≠t kh·∫©u
            user.setEmail(email);
            user.setPhoneNumber(phoneNumber);
            user.setFullName(fullName);
            user.setRole(role);
            user.setAddress(address);
            user.setIsDelete(false); // Ng∆∞·ªùi d√πng kh√¥ng b·ªã x√≥a m·∫∑c ƒë·ªãnh

            String message = userDetailsService.createUser(user, imageFile);
            ApiResponse<User> response = new ApiResponse<>(201, user, message);
            return ResponseEntity.status(201).body(response);
        } catch (Exception e) {
            ApiResponse<User> response = new ApiResponse<>(500, null, "L·ªói khi t·∫°o ng∆∞·ªùi d√πng: " + e.getMessage());
            return ResponseEntity.status(500).body(response);
        }
    }

    // C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng
    @PutMapping("/{id}")
    public ResponseEntity<ApiResponse<User>> updateUser(
            @PathVariable Long id,
            @RequestParam("username") String username,
            @RequestParam("email") String email,
            @RequestParam("phoneNumber") String phoneNumber,
            @RequestParam("fullName") String fullName,
            @RequestParam("role") User.Role role,
            @RequestParam("address") String address,
            @RequestPart(value = "avatar", required = false) MultipartFile imageFile) {
        try {
            User userDetails = new User();
            userDetails.setUsername(username);
            userDetails.setEmail(email);
            userDetails.setPhoneNumber(phoneNumber);
            userDetails.setFullName(fullName);
            userDetails.setRole(role);
            userDetails.setAddress(address);

            // C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng v√† ki·ªÉm tra t√≠nh duy nh·∫•t
            String message = userDetailsService.updateUser(id, userDetails, imageFile);
            ApiResponse<User> response = new ApiResponse<>(200, userDetails, message);
            return ResponseEntity.ok(response);
        } catch (IllegalArgumentException e) {
            // Tr·∫£ v·ªÅ th√¥ng ƒëi·ªáp l·ªói n·∫øu kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ho·∫∑c l·ªói kh√°c
            ApiResponse<User> response = new ApiResponse<>(400, null, e.getMessage());
            return ResponseEntity.status(400).body(response);
        } catch (Exception e) {
            ApiResponse<User> response = new ApiResponse<>(500, null, "L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng: " + e.getMessage());
            return ResponseEntity.status(500).body(response);
        }
    }

    // X√≥a ng∆∞·ªùi d√πng
    @DeleteMapping("/{id}")
    public ResponseEntity<ApiResponse<Void>> deleteUser(@PathVariable Long id) {
        try {
            boolean isDeleted = userDetailsService.deleteUser(id);
            if (isDeleted) {
                ApiResponse<Void> response = new ApiResponse<>(200, null, "X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng");
                return ResponseEntity.ok(response);
            } else {
                ApiResponse<Void> response = new ApiResponse<>(404, null, "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ x√≥a");
                return ResponseEntity.status(404).body(response);
            }
        } catch (Exception e) {
            ApiResponse<Void> response = new ApiResponse<>(500, null, "L·ªói khi x√≥a ng∆∞·ªùi d√πng: " + e.getMessage());
            return ResponseEntity.status(500).body(response);
        }
    }

    // API ƒë·ªïi m·∫≠t kh·∫©u
    @PutMapping("/{id}/change-password")
    public ResponseEntity<ApiResponse<Void>> changePassword(
            @PathVariable Long id,
            @RequestParam("currentPassword") String currentPassword,
            @RequestParam("newPassword") String newPassword) {
        try {
            // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo ID
            Optional<User> userOptional = userDetailsService.getUserById(id);
            if (!userOptional.isPresent()) {
                ApiResponse<Void> response = new ApiResponse<>(404, null, "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");
                return ResponseEntity.status(404).body(response);
            }

            User user = userOptional.get();

            // Ki·ªÉm tra m·∫≠t kh·∫©u hi·ªán t·∫°i c√≥ ƒë√∫ng kh√¥ng
            if (!passwordEncoder.matches(currentPassword, user.getPassword())) {
                ApiResponse<Void> response = new ApiResponse<>(400, null, "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ch√≠nh x√°c");
                return ResponseEntity.status(400).body(response);
            }

            // M√£ h√≥a v√† c·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
            user.setPassword(passwordEncoder.encode(newPassword));
            userDetailsService.saveUser(user); // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng

            ApiResponse<Void> response = new ApiResponse<>(200, null, "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng");
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            ApiResponse<Void> response = new ApiResponse<>(500, null, "L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u: " + e.getMessage());
            return ResponseEntity.status(500).body(response);
        }
    }

}
